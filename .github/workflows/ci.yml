name: CI

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          cache: true

      - name: Run tests
        run: go test ./...

      - name: Run format check
        run: |
          go fmt ./...
          if [ -n "$(git status --porcelain)" ]; then
            echo "Code is not formatted. Run 'go fmt ./...' to fix."
            exit 1
          fi

      - name: Run vet
        run: go vet ./...

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          cache: true

      - name: Install cross-compiler for ARM64
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build Linux binaries
        run: |
          GOOS=linux GOARCH=amd64 make build
          GOOS=linux GOARCH=arm64 CC=aarch64-linux-gnu-gcc make build

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries
          path: dist/linux-*/outline
          retention-days: ${{ startsWith(github.ref, 'refs/tags/') && 90 || 7 }}

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          cache: true


      - name: Build macOS binaries
        run: |
          GOOS=darwin GOARCH=amd64 make build
          GOOS=darwin GOARCH=arm64 make build

      - name: Sign macOS binaries
        if: ${{ env.MACOS_CERTIFICATE != '' }}
        run: |
          echo "$MACOS_CERTIFICATE" | base64 --decode > cert.p12
          # Import certificate
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import cert.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          # Sign binaries
          codesign --sign "$MACOS_CERTIFICATE_NAME" --timestamp --options runtime dist/darwin-amd64/outline
          codesign --sign "$MACOS_CERTIFICATE_NAME" --timestamp --options runtime dist/darwin-arm64/outline
          # Clean up
          rm cert.p12
          security delete-keychain build.keychain
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.MACOS_CERTIFICATE_NAME }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Notarize macOS binaries (releases only)
        if: ${{ env.MACOS_CERTIFICATE != '' && startsWith(github.ref, 'refs/tags/v') }}
        run: |
          # Create zip archives for notarization
          ditto -c -k --sequesterRsrc --keepParent dist/darwin-amd64/outline dist/darwin-amd64-outline.zip
          ditto -c -k --sequesterRsrc --keepParent dist/darwin-arm64/outline dist/darwin-arm64-outline.zip
          # Submit for notarization
          xcrun notarytool submit dist/darwin-amd64-outline.zip --apple-id "$APPLE_ID" --password "$APPLE_PASSWORD" --team-id "$APPLE_TEAM_ID" --wait
          xcrun notarytool submit dist/darwin-arm64-outline.zip --apple-id "$APPLE_ID" --password "$APPLE_PASSWORD" --team-id "$APPLE_TEAM_ID" --wait
          # Staple the notarization tickets
          xcrun stapler staple dist/darwin-amd64/outline
          xcrun stapler staple dist/darwin-arm64/outline
          # Clean up zip files
          rm dist/darwin-amd64-outline.zip dist/darwin-arm64-outline.zip
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-binaries
          path: dist/darwin-*/outline
          retention-days: ${{ startsWith(github.ref, 'refs/tags/') && 90 || 7 }}

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, build-linux, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate changelog
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "❌ CHANGELOG.md not found"
            exit 1
          fi

          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Checking for version $VERSION in changelog"

          # Check if version exists in changelog (without brackets only)
          if ! grep -q "## $VERSION" CHANGELOG.md; then
            echo "❌ Version $VERSION not found in CHANGELOG.md"
            echo "Please add an entry: ## $VERSION"
            exit 1
          fi

          echo "✅ Changelog validated for $VERSION"

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-binaries
          path: dist/

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-binaries
          path: dist/

      - name: Create archives
        run: |
          cd dist
          tar -czf outline-linux-amd64.tar.gz -C linux-amd64 outline
          tar -czf outline-linux-arm64.tar.gz -C linux-arm64 outline
          tar -czf outline-darwin-amd64.tar.gz -C darwin-amd64 outline
          tar -czf outline-darwin-arm64.tar.gz -C darwin-arm64 outline
          sha256sum ./*.tar.gz > checksums.txt

      - name: Extract changelog entry
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Extracting changelog entry for $VERSION"

          # Extract the content between the version header and the next version or end of file
          awk "/^## $VERSION/{flag=1; next} /^## /{flag=0} flag" CHANGELOG.md > release_notes.md

          # If no content found, fallback to just the version
          if [ ! -s release_notes.md ]; then
            echo "Release $VERSION" > release_notes.md
          fi

          echo "Release notes content:"
          cat release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.tar.gz
            dist/checksums.txt
          body_path: release_notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
